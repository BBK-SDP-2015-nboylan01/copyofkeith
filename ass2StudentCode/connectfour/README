		/*
		 * ABOUT TESTING the Game class. 
		 *
		 * Testing is difficult using a JUnit testing class
		 * because it is difficult to get at many of the fields and methods from
		 * that class. So you may want to put some testing methods in this class
		 * Game.
		 * 
		 * In testing various methods, you may want to use boards with certain
		 * layouts of your choosing. For example, a board with column 0 all
		 * filled. To do this, you can
		 * 
		 * 1. Create a board b 
		 * 2. Call makeMove several times to put pieces where you want them. 
		 * 3. Play the game.
		 * 
		 * For example, you can write the following to set up an initial board
		 * and then play the game
		 * 
		 * Board b= new Board(); 
		 * b.makeMove(new Move(Board.Player.RED, 4));
		 * b.makeMove(new Move(Board.Player.YELLOW, 3)); 
		 * b.makeMove(new Move(Board.Player.RED, 5)); 
		 * Game game= new Game(p1, p2, b, false);
		 * 
		 * This code places a red piece in column 4, a yellow piece in column 3,
		 * and a red piece in column 5. Then it runs the game.
		 * 
		 * We provide a method fillColumn at the end of this file to help
		 * out in initializing a board. Study it. Note that it is static.
		 * 
		 * Suppose you want to test a method that your wrote, like
		 * Board.getPossibleMoves. Thus, you want to do the following.
		 * 
		 * 1. Create a board b 
		 * 2. Call makeMove several times to put pieces where you want them. 
		 * 3. Call the method you want to test. 
		 * 4. Check the result, if any.
		 * 
		 * You can check the result by using println statements to print out
		 * things and looking at the output. You are testing by looking at the
		 * output. This is OK as long as you are careful. Here is how you could
		 * print out the results of a call to getPossibleMoves:
		 * 
		 * Board b= new Board(); 
		 * fillColumn(b, Board.Player.RED, 0); // fill column 0 
		 * Move[] moves= b.getPossibleMoves(Board.Player.RED); 
		 * for (Move m : moves) System.out.println(m);
		 * 
		 * If you are having real trouble, the above may not help. Here is what
		 * you can do to test the very basics of Board.getPossibleMoves:
		 * 
		 * Board b= new Board(); 
		 * fillColumn(b, Board.Player.RED, 0); // fill column 0 
		 * Move[] moves= b.getPossibleMoves(Board.Player.RED); 
		 * if (moves.length != Board.NUM_COLS-1)  
		 * 	System.out.println("Error in getPossibleMoves with 1 col filled. array size is wrong: "
		 * 	+ moves.length); 
		 * 
		 * if (moves[0].getColumn() != 1)
		 * 	System.out.println(s + "First col is filled, second isn't but moves[0] is " + moves[0]); 
		 * 
		 */